@page
@model BusBookingSystem.Web.Pages.IndexModel
@{
    ViewData["Title"] = "Bus Ticket Booking";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50">
    <div class="min-h-screen flex flex-col">
        <!-- Simple Admin Link -->
        <div class="absolute top-4 right-4">
            <a href="/Admin/Dashboard" class="text-gray-600 hover:text-blue-600 text-sm font-medium">
                Admin Dashboard →
            </a>
        </div>

        <!-- Main Content -->
        <div class="flex-grow flex items-center justify-center p-4">
            <div class="w-full max-w-lg">
                <!-- Header -->
                <div class="text-center mb-6">
                    <div class="inline-flex items-center space-x-2">
                        <span class="text-4xl">🚌</span>
                        <h1 class="text-4xl font-bold text-gray-900">Bus Booking</h1>
                    </div>
                </div>

                <!-- Form Card -->
                <div class="bg-white shadow-lg rounded-lg overflow-hidden border border-gray-100">
                    <div class="p-6 border-b border-gray-200">
                        <h2 class="text-xl font-semibold text-blue-600">Book Your Bus Ticket</h2>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="px-6 pt-4">
                            <div class="rounded-md bg-red-50 border-l-4 border-red-500 p-4">
                                <div class="flex">
                                    <div class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </div>
                                    <div class="ml-3">
                                        <p class="text-sm text-red-700">@Model.ErrorMessage</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <form method="post" class="p-6 space-y-6">
                        <div class="space-y-6">
                            <div>
                                <label asp-for="BookingCommand.PassengerName" class="block text-sm font-medium text-gray-700">
                                    Passenger Name
                                </label>
                                <div class="mt-1 relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                    </div>
                                    <input asp-for="BookingCommand.PassengerName" 
                                           class="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                                           placeholder="Enter passenger name" />
                                </div>
                                <span asp-validation-for="BookingCommand.PassengerName" class="mt-2 text-sm text-red-600"></span>
                            </div>

                            <div>
                                <label asp-for="BookingCommand.BusNumber" class="block text-sm font-medium text-gray-700">
                                    Bus Number
                                </label>
                                <div class="mt-1 relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2" />
                                        </svg>
                                    </div>
                                    <select asp-for="BookingCommand.BusNumber" 
                                            id="busNumber"
                                            class="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                                            onchange="loadSeatAvailability()">
                                        <option value="">Select a bus</option>
                                        @foreach (var bus in Model.AvailableBuses)
                                        {
                                            <option value="@bus.BusNumber">@bus.BusNumber - @bus.Route (Capacity: @bus.Capacity)</option>
                                        }
                                    </select>
                                </div>
                                <span asp-validation-for="BookingCommand.BusNumber" class="mt-2 text-sm text-red-600"></span>
                            </div>

                            <div>
                                <label asp-for="BookingCommand.TravelDate" class="block text-sm font-medium text-gray-700">
                                    Travel Date
                                </label>
                                <div class="mt-1 relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                    </div>
                                    <input asp-for="BookingCommand.TravelDate" 
                                           id="travelDate"
                                           type="datetime-local" 
                                           value="@DateTime.Now.AddMinutes(10).ToString("yyyy-MM-ddTHH:mm")"
                                           min="@DateTime.Now.AddMinutes(10).ToString("yyyy-MM-ddTHH:mm")"
                                           class="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                                           onchange="loadSeatAvailability()" />
                                </div>
                                <span asp-validation-for="BookingCommand.TravelDate" class="mt-2 text-sm text-red-600"></span>
                            </div>

                            <div>
                                <label asp-for="BookingCommand.SeatNumber" class="block text-sm font-medium text-gray-700">
                                    Seat Number
                                </label>
                                <div class="mt-1 relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 20l4-16m2 16l4-16M6 9h14M4 15h14" />
                                        </svg>
                                    </div>
                                    <input asp-for="BookingCommand.SeatNumber" 
                                           type="number" 
                                           min="1" 
                                           max="100" 
                                           class="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                                           placeholder="Enter seat number" />
                                </div>
                                <span asp-validation-for="BookingCommand.SeatNumber" class="mt-2 text-sm text-red-600"></span>
                            </div>

                            <div id="seatMapContainer" class="hidden">
                                @if (Model.SeatAvailability != null)
                                {
                                    <partial name="_SeatMap" model="Model.SeatAvailability" />
                                }
                            </div>
                        </div>

                        <div class="pt-6">
                            <button type="submit" 
                                    class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Confirm Booking
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="bg-white border-t border-gray-200">
           @*  <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
                <p class="text-center text-sm text-gray-500">© @DateTime.Now.Year - Bus Booking System</p>
            </div> *@
        </footer>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    @section Scripts {
        <script>
            async function loadSeatAvailability() {
                const busNumber = document.getElementById('busNumber').value;
                const travelDate = document.getElementById('travelDate').value;
                const container = document.getElementById('seatMapContainer');
                const seatNumberInput = document.getElementById('BookingCommand_SeatNumber');

                console.log('Loading seats for bus:', busNumber, 'date:', travelDate);

                if (!busNumber || !travelDate) {
                    console.log('Bus number or travel date not selected');
                    container.classList.add('hidden');
                    return;
                }

                try {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    console.log('Antiforgery token:', token ? 'Present' : 'Missing');

                    const response = await fetch(`?handler=SeatAvailability&busNumber=${encodeURIComponent(busNumber)}&travelDate=${encodeURIComponent(travelDate)}`, {
                        headers: {
                            'RequestVerificationToken': token || '',
                            'Accept': 'application/json'
                        }
                    });

                    console.log('API Response status:', response.status);
                    const data = await response.json();
                    console.log('API Response data:', data);

                    if (data.error) {
                        console.error('API Error:', data.error);
                        return;
                    }

                    // Create the seat map HTML
                    const seatMapHtml = `
                        <div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Select a Seat</h3>
                            
                            <div class="mb-4 flex items-center space-x-4">
                                <div class="flex items-center">
                                    <div class="w-6 h-6 bg-green-100 border border-green-200 rounded mr-2"></div>
                                    <span class="text-sm text-gray-600">Available</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-6 h-6 bg-red-100 border border-red-200 rounded mr-2"></div>
                                    <span class="text-sm text-gray-600">Occupied</span>
                                </div>
                                <div class="flex items-center">
                                    <div class="w-6 h-6 bg-blue-100 border border-blue-200 rounded mr-2"></div>
                                    <span class="text-sm text-gray-600">Selected</span>
                                </div>
                            </div>

                            <div class="grid grid-cols-5 gap-2 max-w-md mx-auto">
                                ${Array.from({ length: data.totalSeats }, (_, i) => {
                                    const seatNumber = i + 1;
                                    const seat = data.seats.find(s => s.seatNumber === seatNumber);
                                    const isOccupied = seat?.isOccupied ?? false;
                                    const seatClass = isOccupied ? 
                                        "bg-red-100 border-red-200 cursor-not-allowed" : 
                                        "bg-green-100 border-green-200 hover:bg-green-200 cursor-pointer";

                                    return `
                                        <div class="relative">
                                            <input type="radio" 
                                                   name="BookingCommand.SeatNumber" 
                                                   value="${seatNumber}" 
                                                   id="seat-${seatNumber}" 
                                                   class="hidden seat-radio"
                                                   ${isOccupied ? 'disabled' : ''}>
                                            <label for="seat-${seatNumber}" 
                                                   class="block w-full aspect-square rounded border ${seatClass} transition-colors relative select-none">
                                                <span class="absolute inset-0 flex items-center justify-center text-sm font-medium">
                                                    ${seatNumber}
                                                </span>
                                                ${isOccupied && seat.passengerName ? `
                                                    <div class="absolute bottom-0 left-0 right-0 text-xs text-center bg-red-200 rounded-b px-1 truncate">
                                                        ${seat.passengerName}
                                                    </div>
                                                ` : ''}
                                            </label>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                        </div>
                    `;

                    container.innerHTML = seatMapHtml;
                    container.classList.remove('hidden');

                    // Add event listeners for seat selection
                    const seatRadios = container.querySelectorAll('.seat-radio');
                    const labels = container.querySelectorAll('.seat-radio + label');

                    seatRadios.forEach((radio) => {
                        radio.addEventListener('change', function() {
                            // Remove selected style from all seats
                            labels.forEach(label => {
                                if (!label.classList.contains('bg-red-100')) {
                                    label.classList.remove('bg-blue-200', 'border-blue-300');
                                    label.classList.add('bg-green-100', 'border-green-200');
                                }
                            });

                            // Add selected style to chosen seat
                            if (this.checked && !this.disabled) {
                                const label = this.nextElementSibling;
                                label.classList.remove('bg-green-100', 'border-green-200');
                                label.classList.add('bg-blue-200', 'border-blue-300');
                                
                                // Update the seat number textbox
                                seatNumberInput.value = this.value;
                            }
                        });
                    });

                    // If a seat number is already selected, highlight it
                    const selectedSeatNumber = seatNumberInput.value;
                    if (selectedSeatNumber) {
                        const selectedRadio = container.querySelector(`#seat-${selectedSeatNumber}`);
                        if (selectedRadio && !selectedRadio.disabled) {
                            selectedRadio.checked = true;
                            const label = selectedRadio.nextElementSibling;
                            label.classList.remove('bg-green-100', 'border-green-200');
                            label.classList.add('bg-blue-200', 'border-blue-300');
                        }
                    }

                } catch (error) {
                    console.error('Error loading seat availability:', error);
                }
            }

            // Initial load if bus and date are selected
            document.addEventListener('DOMContentLoaded', function() {
                const busNumber = document.getElementById('busNumber').value;
                const travelDate = document.getElementById('travelDate').value;
                if (busNumber && travelDate) {
                    loadSeatAvailability();
                }
            });
        </script>
    }
</body>
</html>
