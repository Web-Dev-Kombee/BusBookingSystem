@model BusBookingSystem.Application.Dtos.SeatAvailabilityDto

<div class="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Select a Seat</h3>
    
    <div class="mb-4 flex items-center space-x-4">
        <div class="flex items-center">
            <div class="w-6 h-6 bg-green-100 border border-green-200 rounded mr-2"></div>
            <span class="text-sm text-gray-600">Available</span>
        </div>
        <div class="flex items-center">
            <div class="w-6 h-6 bg-red-100 border border-red-200 rounded mr-2"></div>
            <span class="text-sm text-gray-600">Occupied</span>
        </div>
        <div class="flex items-center">
            <div class="w-6 h-6 bg-blue-100 border border-blue-200 rounded mr-2"></div>
            <span class="text-sm text-gray-600">Selected</span>
        </div>
    </div>

    <div class="grid grid-cols-5 gap-2 max-w-md mx-auto">
        @for (int i = 1; i <= Model.TotalSeats; i++)
        {
            var seat = Model.Seats.FirstOrDefault(s => s.SeatNumber == i);
            var isOccupied = seat?.IsOccupied ?? false;
            var seatClass = isOccupied ? 
                "bg-red-100 border-red-200 cursor-not-allowed" : 
                "bg-green-100 border-green-200 hover:bg-green-200 cursor-pointer";

            <div class="relative">
                <input type="radio" 
                       name="BookingCommand.SeatNumber" 
                       value="@i" 
                       id="seat-@i" 
                       class="hidden seat-radio"
                       @(isOccupied ? "disabled" : "")>
                <label for="seat-@i" 
                       class="block w-full aspect-square rounded border @seatClass transition-colors relative select-none">
                    <span class="absolute inset-0 flex items-center justify-center text-sm font-medium">
                        @i
                    </span>
                    @if (isOccupied && !string.IsNullOrEmpty(seat.PassengerName))
                    {
                        <div class="absolute bottom-0 left-0 right-0 text-xs text-center bg-red-200 rounded-b px-1 truncate">
                            @seat.PassengerName
                        </div>
                    }
                </label>
            </div>
        }
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const seatRadios = document.querySelectorAll('.seat-radio');
        const labels = document.querySelectorAll('.seat-radio + label');

        seatRadios.forEach((radio, index) => {
            radio.addEventListener('change', function() {
                // Remove selected style from all seats
                labels.forEach(label => {
                    if (!label.classList.contains('bg-red-100')) {
                        label.classList.remove('bg-blue-200', 'border-blue-300');
                        label.classList.add('bg-green-100', 'border-green-200');
                    }
                });

                // Add selected style to chosen seat
                if (this.checked && !this.disabled) {
                    const label = this.nextElementSibling;
                    label.classList.remove('bg-green-100', 'border-green-200');
                    label.classList.add('bg-blue-200', 'border-blue-300');
                }
            });
        });
    });
</script> 